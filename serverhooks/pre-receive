#!/bin/bash
# hooks/update

# Description from https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks#Server-Side-Hooks
#
# The update script is very similar to the pre-receive script, except that it’s run once
# for each branch the pusher is trying to update. If the pusher is trying to push to
# multiple branches, pre-receive runs only once, whereas update runs once per branch
# they’re pushing to. Instead of reading from stdin, this script takes three arguments:
# the name of the reference (branch), the SHA-1 that reference pointed to before the push,
# and the SHA-1 the user is trying to push. If the update script exits non-zero, only that
# reference is rejected; other references can still be updated.

oldref=$1
newref=$2
refname=$3
# echo -e "${oldrev} ${newrev} ${refname}\n"

# -------------------------------
# Get the list of all the commits
# -------------------------------

# Check if a zero sha
if [ "${oldrev}" = "0000000000000000000000000000000000000000" ]; then
  # List everything reachable from newrev but not any heads
  span=`git rev-list $(git for-each-ref --format='%(refname)' refs/heads/* | sed 's/^/\^/') ${newrev}`
else
  span=`git rev-list ${oldrev}..${newrev}`
fi

# ------------------------------------
# Iterate over all commits in the push
# ------------------------------------
for sha1 in ${span}; do
  # check for whitespace errors in commit
  exec git diff --check ${sha1}^ ${sha1}
  # check commit message
  git log --format=%B -n 1 ${sha1}

  # Verify its not empty
  if [ "${match}" != "" ]; then
    found=$((${found} + 1))
  fi
done
